{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"EXP-EnsembleRF_546ipynb","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VZQkFh2uRvOf","executionInfo":{"status":"ok","timestamp":1656184253262,"user_tz":180,"elapsed":93709,"user":{"displayName":"Priscila Serra Silva Lima","userId":"02401369399211991309"}},"outputId":"05d978e0-74d0-45ef-a241-9b83102ab3dc"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["!pip install tensorflow -U tensorflow_decision_forests > /dev/null"],"metadata":{"id":"M6aomZXwNhtM","executionInfo":{"status":"ok","timestamp":1656184310978,"user_tz":180,"elapsed":57729,"user":{"displayName":"Priscila Serra Silva Lima","userId":"02401369399211991309"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["import numpy as np\n","from sklearn.model_selection import train_test_split\n","import tensorflow_decision_forests as tfdf\n","from sklearn.metrics import classification_report\n","base_dir = '/content/drive/Shareddrives/datasci/ton_iot/result/'"],"metadata":{"id":"DNU702sTVfYT","executionInfo":{"status":"ok","timestamp":1656184315933,"user_tz":180,"elapsed":4984,"user":{"displayName":"Priscila Serra Silva Lima","userId":"02401369399211991309"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["X = []\n","Y = None\n","with open(base_dir+'ALL.csv','r') as infile:\n","  for line in infile:\n","    pred = line.rstrip().split(',')\n","    if pred[0] == 'LABEL':\n","      Y = np.array(pred[1:], dtype='int8').transpose()\n","    else:\n","      X.append(pred[1:])\n","X = np.array(X, dtype='int8').transpose()"],"metadata":{"id":"xfYXHgHuRz9-","executionInfo":{"status":"ok","timestamp":1656184316273,"user_tz":180,"elapsed":395,"user":{"displayName":"Priscila Serra Silva Lima","userId":"02401369399211991309"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["model = tfdf.keras.RandomForestModel()\n","model.compile()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VrrwOUwUIpWP","executionInfo":{"status":"ok","timestamp":1656184316562,"user_tz":180,"elapsed":296,"user":{"displayName":"Priscila Serra Silva Lima","userId":"02401369399211991309"}},"outputId":"57f84d23-b3d3-46d9-d3cd-9b42a9165168"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Use /tmp/tmpxialjscg as temporary training directory\n"]}]},{"cell_type":"code","source":["X_train, X_test, Y_train, Y_test = train_test_split(X, \n","                                                    Y, \n","                                                    test_size=0.3,\n","                                                    random_state=546)"],"metadata":{"id":"nmZBNJuKHDXc","executionInfo":{"status":"ok","timestamp":1656184316562,"user_tz":180,"elapsed":6,"user":{"displayName":"Priscila Serra Silva Lima","userId":"02401369399211991309"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["history = model.fit(X_train,\n","                    Y_train,\n","                    verbose = 1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iePENDUJHbes","executionInfo":{"status":"ok","timestamp":1656184341857,"user_tz":180,"elapsed":25300,"user":{"displayName":"Priscila Serra Silva Lima","userId":"02401369399211991309"}},"outputId":"fb4e35d9-1bba-4202-f645-9512dc83f08d"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Reading training dataset...\n","Training dataset read in 0:00:08.113048. Found 96819 examples.\n","Training model...\n","Model trained in 0:00:14.856149\n","Compiling model...\n","WARNING:tensorflow:AutoGraph could not transform <function simple_ml_inference_op_with_handle at 0x7f6a718f5a70> and will run it as-is.\n","Please report this to the TensorFlow team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output.\n","Cause: could not get source code\n","To silence this warning, decorate the function with @tf.autograph.experimental.do_not_convert\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:AutoGraph could not transform <function simple_ml_inference_op_with_handle at 0x7f6a718f5a70> and will run it as-is.\n","Please report this to the TensorFlow team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output.\n","Cause: could not get source code\n","To silence this warning, decorate the function with @tf.autograph.experimental.do_not_convert\n"]},{"output_type":"stream","name":"stdout","text":["WARNING: AutoGraph could not transform <function simple_ml_inference_op_with_handle at 0x7f6a718f5a70> and will run it as-is.\n","Please report this to the TensorFlow team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output.\n","Cause: could not get source code\n","To silence this warning, decorate the function with @tf.autograph.experimental.do_not_convert\n","Model compiled.\n"]}]},{"cell_type":"code","source":["predict = model.predict(X_test, verbose=1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UVF-q_87OAFf","executionInfo":{"status":"ok","timestamp":1656184344831,"user_tz":180,"elapsed":2987,"user":{"displayName":"Priscila Serra Silva Lima","userId":"02401369399211991309"}},"outputId":"4f0f7744-ad02-49c0-dd9f-12695517ec63"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["1297/1297 [==============================] - 2s 2ms/step\n"]}]},{"cell_type":"code","source":["tp,tn,fp,fn = 0,0,0,0\n","predictn = predict.flatten().round().tolist()\n","len(predictn)\n","for i in range(len(predictn)):\n","  if predictn[i]==1 and Y_test[i]==1:\n","    tp+=1\n","  elif predictn[i]==0 and Y_test[i]==0:\n","    tn+=1\n","  elif predictn[i]==0 and Y_test[i]==1:\n","    fp+=1\n","  elif predictn[i]==1 and Y_test[i]==0:\n","    fn+=1\n","    \n","print(tp,tn,fp,fn)\n","classification_report(Y_test, predictn, output_dict=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ysfV8seIOBAv","executionInfo":{"status":"ok","timestamp":1656184344832,"user_tz":180,"elapsed":24,"user":{"displayName":"Priscila Serra Silva Lima","userId":"02401369399211991309"}},"outputId":"48341484-2b18-4b1f-bac5-bcdf605134fc"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["14500 26843 86 65\n"]},{"output_type":"execute_result","data":{"text/plain":["{'0': {'f1-score': 0.9971952374760851,\n","  'precision': 0.996806416874002,\n","  'recall': 0.9975843615281701,\n","  'support': 26908},\n"," '1': {'f1-score': 0.9948200747830263,\n","  'precision': 0.9955372468245794,\n","  'recall': 0.9941039352804059,\n","  'support': 14586},\n"," 'accuracy': 0.9963609196510339,\n"," 'macro avg': {'f1-score': 0.9960076561295557,\n","  'precision': 0.9961718318492907,\n","  'recall': 0.9958441484042879,\n","  'support': 41494},\n"," 'weighted avg': {'f1-score': 0.9963603186193598,\n","  'precision': 0.9963602773275404,\n","  'recall': 0.9963609196510339,\n","  'support': 41494}}"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["print(model.summary())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1uMNS7FbE3ta","executionInfo":{"status":"ok","timestamp":1656184344835,"user_tz":180,"elapsed":21,"user":{"displayName":"Priscila Serra Silva Lima","userId":"02401369399211991309"}},"outputId":"ac06a2c9-4bec-4dcf-db0a-bf6b29e0f365"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"random_forest_model\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n","=================================================================\n","Total params: 1\n","Trainable params: 0\n","Non-trainable params: 1\n","_________________________________________________________________\n","Type: \"RANDOM_FOREST\"\n","Task: CLASSIFICATION\n","Label: \"__LABEL\"\n","\n","Input Features (10):\n","\tdata:0.0\n","\tdata:0.1\n","\tdata:0.2\n","\tdata:0.3\n","\tdata:0.4\n","\tdata:0.5\n","\tdata:0.6\n","\tdata:0.7\n","\tdata:0.8\n","\tdata:0.9\n","\n","No weights\n","\n","Variable Importance: MEAN_MIN_DEPTH:\n","    1.  \"__LABEL\"  6.010939 ################\n","    2. \"data:0.5\"  5.328972 #############\n","    3. \"data:0.4\"  5.318686 #############\n","    4. \"data:0.2\"  5.305998 #############\n","    5. \"data:0.9\"  4.272762 ##########\n","    6. \"data:0.3\"  4.109449 #########\n","    7. \"data:0.1\"  4.084358 #########\n","    8. \"data:0.6\"  3.452211 #######\n","    9. \"data:0.0\"  3.359699 ######\n","   10. \"data:0.7\"  1.835609 #\n","   11. \"data:0.8\"  1.324131 \n","\n","Variable Importance: NUM_AS_ROOT:\n","    1. \"data:0.8\" 154.000000 ################\n","    2. \"data:0.7\" 93.000000 #########\n","    3. \"data:0.3\" 26.000000 ##\n","    4. \"data:0.0\" 22.000000 ##\n","    5. \"data:0.6\"  4.000000 \n","    6. \"data:0.4\"  1.000000 \n","\n","Variable Importance: NUM_NODES:\n","    1. \"data:0.9\" 2747.000000 ################\n","    2. \"data:0.6\" 2068.000000 ##########\n","    3. \"data:0.4\" 1935.000000 #########\n","    4. \"data:0.1\" 1820.000000 ########\n","    5. \"data:0.7\" 1284.000000 ####\n","    6. \"data:0.8\" 1010.000000 #\n","    7. \"data:0.3\" 852.000000 \n","    8. \"data:0.0\" 812.000000 \n","    9. \"data:0.2\" 799.000000 \n","   10. \"data:0.5\" 775.000000 \n","\n","Variable Importance: SUM_SCORE:\n","    1. \"data:0.8\" 9287165.587256 ################\n","    2. \"data:0.7\" 5437352.417665 #########\n","    3. \"data:0.0\" 1452726.109347 ##\n","    4. \"data:0.3\" 1393178.306899 ##\n","    5. \"data:0.6\" 489508.301035 \n","    6. \"data:0.1\" 181330.477774 \n","    7. \"data:0.9\" 63821.293811 \n","    8. \"data:0.2\" 61907.177220 \n","    9. \"data:0.4\" 50932.018397 \n","   10. \"data:0.5\" 33357.962984 \n","\n","\n","\n","Winner take all: true\n","Out-of-bag evaluation: accuracy:0.996643 logloss:0.0991599\n","Number of trees: 300\n","Total number of nodes: 28504\n","\n","Number of nodes by tree:\n","Count: 300 Average: 95.0133 StdDev: 5.50392\n","Min: 81 Max: 113 Ignored: 0\n","----------------------------------------------\n","[  81,  82)  3   1.00%   1.00% #\n","[  82,  84)  7   2.33%   3.33% ##\n","[  84,  85)  0   0.00%   3.33%\n","[  85,  87)  9   3.00%   6.33% ##\n","[  87,  89) 12   4.00%  10.33% ###\n","[  89,  90) 24   8.00%  18.33% #####\n","[  90,  92) 26   8.67%  27.00% ######\n","[  92,  94) 43  14.33%  41.33% ##########\n","[  94,  95)  0   0.00%  41.33%\n","[  95,  97) 44  14.67%  56.00% ##########\n","[  97,  99) 41  13.67%  69.67% #########\n","[  99, 100) 35  11.67%  81.33% ########\n","[ 100, 102) 32  10.67%  92.00% #######\n","[ 102, 104) 13   4.33%  96.33% ###\n","[ 104, 105)  0   0.00%  96.33%\n","[ 105, 107)  6   2.00%  98.33% #\n","[ 107, 109)  2   0.67%  99.00%\n","[ 109, 110)  1   0.33%  99.33%\n","[ 110, 112)  1   0.33%  99.67%\n","[ 112, 113]  1   0.33% 100.00%\n","\n","Depth by leafs:\n","Count: 14402 Average: 6.01548 StdDev: 1.13697\n","Min: 3 Max: 10 Ignored: 0\n","----------------------------------------------\n","[  3,  4)  114   0.79%   0.79%\n","[  4,  5) 1066   7.40%   8.19% ##\n","[  5,  6) 3446  23.93%  32.12% #######\n","[  6,  7) 5192  36.05%  68.17% ##########\n","[  7,  8) 3317  23.03%  91.20% ######\n","[  8,  9)  995   6.91%  98.11% ##\n","[  9, 10)  252   1.75%  99.86%\n","[ 10, 10]   20   0.14% 100.00%\n","\n","Number of training obs by leaf:\n","Count: 14402 Average: 2016.78 StdDev: 5898.74\n","Min: 5 Max: 45389 Ignored: 0\n","----------------------------------------------\n","[     5,  2274) 12722  88.33%  88.33% ##########\n","[  2274,  4543)   214   1.49%  89.82%\n","[  4543,  6812)     0   0.00%  89.82%\n","[  6812,  9082)   291   2.02%  91.84%\n","[  9082, 11351)     5   0.03%  91.88%\n","[ 11351, 13620)   300   2.08%  93.96%\n","[ 13620, 15889)     0   0.00%  93.96%\n","[ 15889, 18159)   236   1.64%  95.60%\n","[ 18159, 20428)    24   0.17%  95.76%\n","[ 20428, 22697)   306   2.12%  97.89%\n","[ 22697, 24966)     0   0.00%  97.89%\n","[ 24966, 27236)    42   0.29%  98.18%\n","[ 27236, 29505)   228   1.58%  99.76%\n","[ 29505, 31774)     4   0.03%  99.79%\n","[ 31774, 34043)     0   0.00%  99.79%\n","[ 34043, 36313)     0   0.00%  99.79%\n","[ 36313, 38582)     0   0.00%  99.79%\n","[ 38582, 40851)     0   0.00%  99.79%\n","[ 40851, 43120)     0   0.00%  99.79%\n","[ 43120, 45389]    30   0.21% 100.00%\n","\n","Attribute in nodes:\n","\t2747 : data:0.9 [CATEGORICAL]\n","\t2068 : data:0.6 [CATEGORICAL]\n","\t1935 : data:0.4 [CATEGORICAL]\n","\t1820 : data:0.1 [CATEGORICAL]\n","\t1284 : data:0.7 [CATEGORICAL]\n","\t1010 : data:0.8 [CATEGORICAL]\n","\t852 : data:0.3 [CATEGORICAL]\n","\t812 : data:0.0 [CATEGORICAL]\n","\t799 : data:0.2 [CATEGORICAL]\n","\t775 : data:0.5 [CATEGORICAL]\n","\n","Attribute in nodes with depth <= 0:\n","\t154 : data:0.8 [CATEGORICAL]\n","\t93 : data:0.7 [CATEGORICAL]\n","\t26 : data:0.3 [CATEGORICAL]\n","\t22 : data:0.0 [CATEGORICAL]\n","\t4 : data:0.6 [CATEGORICAL]\n","\t1 : data:0.4 [CATEGORICAL]\n","\n","Attribute in nodes with depth <= 1:\n","\t263 : data:0.8 [CATEGORICAL]\n","\t199 : data:0.0 [CATEGORICAL]\n","\t197 : data:0.7 [CATEGORICAL]\n","\t120 : data:0.6 [CATEGORICAL]\n","\t105 : data:0.3 [CATEGORICAL]\n","\t7 : data:0.4 [CATEGORICAL]\n","\t6 : data:0.9 [CATEGORICAL]\n","\t3 : data:0.5 [CATEGORICAL]\n","\n","Attribute in nodes with depth <= 2:\n","\t450 : data:0.7 [CATEGORICAL]\n","\t372 : data:0.8 [CATEGORICAL]\n","\t329 : data:0.0 [CATEGORICAL]\n","\t293 : data:0.6 [CATEGORICAL]\n","\t220 : data:0.1 [CATEGORICAL]\n","\t194 : data:0.3 [CATEGORICAL]\n","\t86 : data:0.9 [CATEGORICAL]\n","\t73 : data:0.2 [CATEGORICAL]\n","\t55 : data:0.5 [CATEGORICAL]\n","\t28 : data:0.4 [CATEGORICAL]\n","\n","Attribute in nodes with depth <= 3:\n","\t783 : data:0.7 [CATEGORICAL]\n","\t708 : data:0.9 [CATEGORICAL]\n","\t695 : data:0.6 [CATEGORICAL]\n","\t669 : data:0.1 [CATEGORICAL]\n","\t480 : data:0.8 [CATEGORICAL]\n","\t475 : data:0.0 [CATEGORICAL]\n","\t261 : data:0.3 [CATEGORICAL]\n","\t140 : data:0.2 [CATEGORICAL]\n","\t89 : data:0.5 [CATEGORICAL]\n","\t86 : data:0.4 [CATEGORICAL]\n","\n","Attribute in nodes with depth <= 5:\n","\t2406 : data:0.9 [CATEGORICAL]\n","\t1765 : data:0.6 [CATEGORICAL]\n","\t1705 : data:0.1 [CATEGORICAL]\n","\t1236 : data:0.7 [CATEGORICAL]\n","\t1234 : data:0.4 [CATEGORICAL]\n","\t814 : data:0.8 [CATEGORICAL]\n","\t730 : data:0.0 [CATEGORICAL]\n","\t602 : data:0.5 [CATEGORICAL]\n","\t552 : data:0.3 [CATEGORICAL]\n","\t414 : data:0.2 [CATEGORICAL]\n","\n","Condition type in nodes:\n","\t14102 : ContainsBitmapCondition\n","Condition type in nodes with depth <= 0:\n","\t300 : ContainsBitmapCondition\n","Condition type in nodes with depth <= 1:\n","\t900 : ContainsBitmapCondition\n","Condition type in nodes with depth <= 2:\n","\t2100 : ContainsBitmapCondition\n","Condition type in nodes with depth <= 3:\n","\t4386 : ContainsBitmapCondition\n","Condition type in nodes with depth <= 5:\n","\t11458 : ContainsBitmapCondition\n","Node format: NOT_SET\n","\n","Training OOB:\n","\ttrees: 1, Out-of-bag evaluation: accuracy:0.996798 logloss:0.115401\n","\ttrees: 11, Out-of-bag evaluation: accuracy:0.99655 logloss:0.110144\n","\ttrees: 21, Out-of-bag evaluation: accuracy:0.996602 logloss:0.105697\n","\ttrees: 31, Out-of-bag evaluation: accuracy:0.996633 logloss:0.102925\n","\ttrees: 41, Out-of-bag evaluation: accuracy:0.996612 logloss:0.103017\n","\ttrees: 51, Out-of-bag evaluation: accuracy:0.996633 logloss:0.101996\n","\ttrees: 61, Out-of-bag evaluation: accuracy:0.996633 logloss:0.101669\n","\ttrees: 71, Out-of-bag evaluation: accuracy:0.996633 logloss:0.101706\n","\ttrees: 81, Out-of-bag evaluation: accuracy:0.996633 logloss:0.10065\n","\ttrees: 91, Out-of-bag evaluation: accuracy:0.996643 logloss:0.0996257\n","\ttrees: 101, Out-of-bag evaluation: accuracy:0.996643 logloss:0.0995765\n","\ttrees: 111, Out-of-bag evaluation: accuracy:0.996643 logloss:0.0995812\n","\ttrees: 121, Out-of-bag evaluation: accuracy:0.996643 logloss:0.0995961\n","\ttrees: 131, Out-of-bag evaluation: accuracy:0.996643 logloss:0.099594\n","\ttrees: 141, Out-of-bag evaluation: accuracy:0.996643 logloss:0.0996007\n","\ttrees: 151, Out-of-bag evaluation: accuracy:0.996643 logloss:0.0995934\n","\ttrees: 161, Out-of-bag evaluation: accuracy:0.996643 logloss:0.0995914\n","\ttrees: 171, Out-of-bag evaluation: accuracy:0.996643 logloss:0.0995784\n","\ttrees: 181, Out-of-bag evaluation: accuracy:0.996643 logloss:0.0995735\n","\ttrees: 191, Out-of-bag evaluation: accuracy:0.996643 logloss:0.099571\n","\ttrees: 201, Out-of-bag evaluation: accuracy:0.996643 logloss:0.0995805\n","\ttrees: 211, Out-of-bag evaluation: accuracy:0.996643 logloss:0.0995731\n","\ttrees: 221, Out-of-bag evaluation: accuracy:0.996643 logloss:0.0992318\n","\ttrees: 231, Out-of-bag evaluation: accuracy:0.996643 logloss:0.0992013\n","\ttrees: 241, Out-of-bag evaluation: accuracy:0.996643 logloss:0.0991924\n","\ttrees: 251, Out-of-bag evaluation: accuracy:0.996643 logloss:0.0991958\n","\ttrees: 261, Out-of-bag evaluation: accuracy:0.996643 logloss:0.0991607\n","\ttrees: 271, Out-of-bag evaluation: accuracy:0.996643 logloss:0.0991803\n","\ttrees: 281, Out-of-bag evaluation: accuracy:0.996643 logloss:0.0991856\n","\ttrees: 291, Out-of-bag evaluation: accuracy:0.996643 logloss:0.0991662\n","\ttrees: 300, Out-of-bag evaluation: accuracy:0.996643 logloss:0.0991599\n","\n","None\n"]}]},{"cell_type":"code","source":["model.save('/content/drive/Shareddrives/datasci/ton_iot/result/RF.tf')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8MBtW0IQSCiS","executionInfo":{"status":"ok","timestamp":1656184346401,"user_tz":180,"elapsed":1578,"user":{"displayName":"Priscila Serra Silva Lima","userId":"02401369399211991309"}},"outputId":"5cf441b4-3f04-49ea-d4c8-fe7744938215"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:absl:Found untraced functions such as call_get_leaves while saving (showing 1 of 1). These functions will not be directly callable after loading.\n"]},{"output_type":"stream","name":"stdout","text":["INFO:tensorflow:Assets written to: /content/drive/Shareddrives/datasci/ton_iot/result/RF.tf/assets\n"]},{"output_type":"stream","name":"stderr","text":["INFO:tensorflow:Assets written to: /content/drive/Shareddrives/datasci/ton_iot/result/RF.tf/assets\n"]}]}]}